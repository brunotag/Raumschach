using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Serialization;
using System.IO;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework;

namespace Raumschach_Chess
{
  /// <summary>  
     /// Game settings, stored in a custom xml file. The reason for this is  
     /// we want to be able to store our game data on the Xbox360 too.  
     /// On the PC we could just use a Settings/config file and have all the  
     /// code autogenerated for us, but this way it works both on PC and Xbox.  
     /// Note: The default instance for the game settings is in this class,  
     /// this way we get the same behaviour as for normal Settings files!  
     /// </summary>  
     public class GameStatus  
     {
         public PossibleResult Result
         {
             get;
             set;
         }

         private PGNTags pgn;
         public PGNTags PGN
         {
             get
             {
                 return pgn;
             }
         }

         //private Square[, ,] squares = new Square[5,5,5];
         //public Square[, ,] ChessboardSquares
         //{
         //    get
         //    {
         //        return squares;
         //    }
         //}

         //private List<Piece> pieces = new List<Piece>();
         //public List<Piece> Pieces
         //{
         //    get
         //    {
         //        return pieces;
         //    }
         //}
 
         private GameOptions gameOptions;
         public GameOptions GameOpts
         {
             get
             {
                 return gameOptions;
             }
             set
             {
                 gameOptions = value;
             }
         }

         public int HalfMoveFiftyCounter
         {
             get
             {
                 return ChessboardLogics.GetFifty();
             }
             set
             {
                 ChessboardLogics.SetFifty(value);
             }
         }

         public SideCollection Sides
         {
             get;
             set;
         }
         
         public SideType SideToMove
         {
             get
             {
                 int stm = ChessboardLogics.GetSideToMove();
                 if (stm == 0)
                     return SideType.White;
                 if (stm == 1)
                     return SideType.Black;
                 throw new Exception("Errore in ChessboardLogics.SideToMove");
             }
             set
             {
                 int stm;
                 if (value == SideType.White)
                     stm = 0;
                 else
                     stm = 1;
                 ChessboardLogics.SetSideToMove(stm);
             }
         }

         public GameStatus()
         {
             Sides = new SideCollection();
             DirectionalLight0Direction= new Vector3(-0.5f, -0.5f, -0.5f);
             DirectionalLight1Direction = new Vector3(-0.5f, -0.5f, -0.5f);
             TransparentSide = TraspSide.RightOfWhite;
             transpGradPieces = transpGradSquares = 1;
             ColorWhitePieces = ColorWhiteSquares = Color.Red;
             ColorBlackPieces = ColorBlackSquares = Color.Blue;
         }

         private TraspSide transpSide;
         public TraspSide TransparentSide
         {
             get
             {
                 return transpSide;
             }
             set
             {
                 transpSide = value;
             }
         }

         public Vector3 DirectionalLight0Direction
         {
             get;
             set;
         }

         public Vector3 DirectionalLight1Direction
         {
             get;
             set;
         }

         //public bool AlphaTransparency
         //{
         //    get;
         //    set;
         //}

         private float transpGradSquares;
         public float TranspGradSquares
         {
             get
             {
                 return transpGradSquares;
             }
             set
             {
                 if (value > 1) { transpGradSquares = 1; return; }
                 if (value < 0) { transpGradSquares = 0; return; }
                 transpGradSquares = value;
             }
         }

         private float transpGradPieces;
         public float TranspGradPieces
         {
             get
             {
                 return transpGradPieces;
             }
             set
             {
                 if (value > 1) { transpGradPieces = 1; return; }
                 if (value < 0) { transpGradPieces = 0; return; }
                 transpGradPieces = value;
             }
         }
         private Color colWhitePieces;
         public Color ColorWhitePieces
         {
             get
             {
                 return colWhitePieces;
             }
             set
             {
                 colWhitePieces = value;
                 colSelPieces = GetMostDistantByTwoColors(colBlackPieces, value);
             }
         }
         private Color colBlackPieces;
         public Color ColorBlackPieces
         {
             get
             {
                 return colBlackPieces;
             }
             set
             {
                 colBlackPieces = value;
                 colSelPieces = GetMostDistantByTwoColors(colWhitePieces, value);
             }
         }
         private Color colWhiteSquares;
         public Color ColorWhiteSquares
         {
             get
             {
                 return colWhiteSquares;
             }
             set
             {
                 colWhiteSquares = value;
                 colSelSquares = GetMostDistantByTwoColors(colBlackSquares, value);
             }
         }
         private Color colBlackSquares;
         public Color ColorBlackSquares
         {
             get
             {
                 return colBlackSquares;
             }
             set
             {
                 colBlackSquares = value;
                 colSelSquares = GetMostDistantByTwoColors(colWhiteSquares, value);
             }
         }

         private Color GetMostDistantByTwoColors(Color col1, Color col2)
         {
             Color col = new Color(
                (byte)(200 - ((col1.R + col2.R) / 2)),
                (byte)(200 - ((col1.G + col2.G) / 2)),
                (byte)(200 - ((col1.B + col2.B) / 2))
             );
             return col;
         }

         private Color colSelPieces;
         public Color ColorSelectedPieces
         {
             get
             {
                 return colSelPieces;
             }
         }

         private Color colSelSquares;
         public Color ColorSelectedSquares
         {
             get
             {
                 return colSelSquares;
             }
         }


         /*
         #region Load  
         /// <summary>  
         /// Load  
         /// </summary>  
         public static void Load()  
         {  
   
             FileStream file = FileHelper.LoadGameContentFile(  );  
   
             if (file == null)  
             {  
                 // We need a save, but wait to create the file after quitting.  
                 _needSave = true;  
                 return;  
             }  
   
             // If the file is empty, just create a new file with the default  
             // settings.  
             if (file.Length == 0)  
             {  
                 // Close the file first.  
                 file.Close();  
   
                 // Check if there is a file in the game directory  
                 // to load the default game settings.  
                 file = FileHelper.LoadGameContentFile(SettingsFilename);  
                 if (file != null)  
                 {  
                     // Load everything into this class.  
                     GameStatus loadedGameSetting =  
                         (GameStatus)new XmlSerializer(typeof(GameStatus)).Deserialize(file);  
                     if (loadedGameSetting != null)  
                         _defaultInstance = loadedGameSetting;  
   
                     // Close the file.  
                     file.Close();  
                 }  
   
                 // Save the user settings.  
                 _needSave = true;  
                 Save();  
             }  
             else  
             {  
                 // Else load everything into this class with help of the  
                 // XmlSerializer.  
                 GameStatus loadedGameSetting =  
                     (GameStatus)new XmlSerializer(typeof(GameStatus)).Deserialize(file);  
                 if (loadedGameSetting != null)  
                     _defaultInstance = loadedGameSetting;  
   
                 // Close the file.  
                 file.Close();  
             }  
         }  
         #endregion         
   
         #region Save  
         /// <summary>  
         /// Save  
         /// </summary>  
         public static void Save()  
         {  
             // No need to save if everything is up to date.  
             if (!_needSave)  
                 return;  
   
             _needSave = false;  
   
             FileStream file = FileHelper.SaveGameContentFile(  
                 SettingsFilename);  
   
             // Save everything in this class with help from the XmlSerializer.  
             new XmlSerializer(typeof(GameStatus)).Serialize(file, _defaultInstance);  
   
             // Close the file.  
             file.Close();  
         }  */
   
 
     }  
}
